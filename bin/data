;;; -*- Mode: Scheme -*-

(define (~ path)
  (build-path (home-directory) path))

(define *lisp-dir*
  (~ "lisp"))

(define (lisp path)
  (build-path *lisp-dir* path))

(define *asdf-registry*
  (lisp "systems"))

(define (ediware name)
  (string-append "http://common-lisp.net/~loliveira/ediware/" name)
  ;; (string-append "svn://svn.bknr.net/svn/trunk/thirdparty/" name)
  )

(define (cl-net-cvs name module)
  (format
   ":pserver:anonymous:anonymous@common-lisp.net:/project/~a/cvsroot ~a"
   name module))

(define (cl-net-darcs name)
  (format
   "http://www.common-lisp.net/project/~a/darcs/~a/"
   name name))

(define (sf-cvs name module)
  (format
   ":pserver:anonymous@~a.cvs.sourceforge.net:/cvsroot/~a ~a"
   name name module))

(define *projects*
  `((flexi-streams darcs ,(ediware "flexi-streams") ,(lisp "site/flexi-streams") ("flexi-streams.asd"))
    (drakma darcs ,(ediware "drakma") ,(lisp "site/drakma") ("drakma.asd"))
    (cl-ppcre darcs ,(ediware "cl-ppcre") ,(lisp "site/cl-ppcre") ("cl-ppcre.asd"))
    (chunga darcs ,(ediware "chunga") ,(lisp "site/chunga") ("chunga.asd"))
    (url-rewrite darcs ,(ediware "url-rewrite") ,(lisp "site/url-rewrite") ("url-rewrite.asd"))
    (cl-who darcs ,(ediware "cl-who") ,(lisp "site/cl-who") ("cl-who.asd"))
    (hunchentoot darcs ,(ediware "hunchentoot") ,(lisp "site/hunchentoot") ("hunchentoot.asd"))
    (cl-fad darcs ,(ediware "cl-fad") ,(lisp "site/cl-fad") ("cl-fad.asd"))
    (cl-gd darcs ,(ediware "cl-gd") ,(lisp "site/cl-gd") ("cl-gd.asd"))

    (cl+ssl cvs ,(cl-net-cvs "cl-plus-ssl" "cl+ssl") ,(lisp "site/cl+ssl") ("cl+ssl.asd"))
    (trivial-gray-streams cvs ,(cl-net-cvs "cl-plus-ssl" "trivial-gray-streams")
                          ,(lisp "site/trivial-gray-streams") ("trivial-gray-streams.asd"))
    (cffi darcs ,(cl-net-darcs "cffi") ,(lisp "site/cffi") ("cffi.asd" "cffi-uffi-compat.asd"))
    (babel darcs ,(cl-net-darcs "babel") ,(lisp "site/babel") ("babel.asd"))
    (alexandria darcs ,(cl-net-darcs "alexandria") ,(lisp "site/alexandria") ("alexandria.asd"))

    (trivial-features darcs "http://common-lisp.net/~loliveira/darcs/trivial-features/"
                      ,(lisp "site/trivial-features") ("trivial-features.asd"))
    (trivial-utf-8 darcs ,(cl-net-darcs "trivial-utf-8") ,(lisp "site/trivial-utf-8") ("trivial-utf-8.asd"))
    (usocket svn "svn://common-lisp.net/project/usocket/svn/usocket/trunk"
             ,(lisp "site/usocket") ("usocket.asd"))
    (puri git "git://git.b9.com/puri.git" ,(lisp "site/puri") ("puri.asd"))
    (cl-base64 git "git://git.b9.com/cl-base64.git" ,(lisp "site/cl-base64") ("cl-base64.asd"))
    (md5 git "git://git.b9.com/md5.git" ,(lisp "site/md5") ("md5.asd"))
    (clsql git "git://git.b9.com/clsql.git" ,(lisp "site/clsql") ("clsql.asd"))
    (asdf cvs ,(sf-cvs "cclan" "asdf") ,(lisp "site/asdf") ())

    (cl-audioscrobbler svn "http://cl-audioscrobbler.googlecode.com/svn/trunk/"
                       ,(lisp "site/cl-audioscrobbler") ("cl-audioscrobbler.asd"))
    (s-xml cvs ,(cl-net-cvs "s-xml" "s-xml") ,(lisp "site/s-xml") ("s-xml.asd"))
    (clx darcs "http://common-lisp.net/~crhodes/clx/" ,(lisp "site/clx") ("clx.asd"))
    (mcclim cvs ,(cl-net-cvs "mcclim" "mcclim") ,(lisp "site/mcclim")
            ("mcclim.asd" "clim-listener.asd"))
    (climacs cvs ,(cl-net-cvs "climacs" "climacs") ,(lisp "site/climacs") ("climacs.asd"))
    (flexichain cvs ,(cl-net-cvs "flexichain" "flexichain") ,(lisp "site/flexichain") ("flexichain.asd"))
    (spatial-trees darcs "http://rvw.doc.gold.ac.uk/gibbons/darcs/spatial-trees"
                   ,(lisp "site/spatial-trees") ("spatial-trees.asd"))
    (cl-xmpp cvs ,(cl-net-cvs "cl-xmpp" "cl-xmpp") ,(lisp "site/cl-xmpp")
             ("cl-xmpp.asd" "cl-xmpp-tls.asd" "cl-xmpp-sasl.asd"))
    (cxml git "git://repo.or.cz/cxml.git" ,(lisp "site/cxml") ("cxml.asd"))
    (closure-common git "git://repo.or.cz/closure-common.git" ,(lisp "site/closure-common") ("closure-common.asd"))
    (closure-html git "git://repo.or.cz/closure-html.git" ,(lisp "site/closure-html") ("closure-html.asd"))
    (iterate darcs ,(cl-net-darcs "iterate") ,(lisp "site/iterate") ("iterate.asd"))
    (cl-utilities cvs ,(cl-net-cvs "cl-utilities" "cl-utilities") ,(lisp "site/cl-utilities") ("cl-utilities.asd"))
    (acl-compat cvs ,(sf-cvs "portableaserve" "portableaserve/acl-compat")
                ,(lisp "site/acl-compat") ("acl-compat.asd"))
    (trivial-http svn "svn://unmutual.info/trivial-http" ,(lisp "site/trivial-http") ("trivial-http.asd"))
    (org-davep-dict wget "http://www.davep.org/lisp/org-davep-dict-2.3.tar.gz"
                    ,(lisp "site/org-davep-dict") ("org-davep-dict.asd"))
    (hunchentoot-cgi git "git://cyrusharmon.org/pub/git/hunchentoot-cgi.git"
                     ,(lisp "site/hunchentoot-cgi") ("hunchentoot-cgi.asd"))
    (local-time darcs ,(cl-net-darcs "local-time") ,(lisp "site/local-time") ("local-time.asd"))
    (asdf-system-connections darcs
                             "http://common-lisp.net/project/cl-containers/asdf-system-connections/darcs/asdf-system-connections"
                             ,(lisp "site/asdf-system-connections") ("asdf-system-connections.asd"))
    (asdf-binary-locations darcs ,(cl-net-darcs "asdf-binary-locations")
                           ,(lisp "site/asdf-binary-locations") ("asdf-system-connections.asd"))
    (stumpwm git "git://git.savannah.nongnu.org/stumpwm.git" ,(lisp "site/stumpwm") ("stumpwm.asd"))
    (closer-mop darcs "http://common-lisp.net/project/closer/repos/closer-mop/" ,(lisp "site/closer-mop") ("closer-mop.asd"))
    (ltk wget "http://www.peter-herth.de/ltk/ltk-0.91.tgz" ,(lisp "site/ltk") ("ltk.asd"))
    (able wget "http://phil.nullable.eu/files/able-src-0.18.zip" ,(lisp "site/able") ("able.asd"))
    (png-read git "git://github.com/Ramarren/png-read.git" ,(lisp "site/png-read") ("png-read.asd"))
    (chipz wget "http://www.method-combination.net/lisp/files/chipz.tar.gz" ,(lisp "site/chipz") ("chipz.asd"))
    (ironclad wget "http://www.method-combination.net/lisp/files/ironclad.tar.gz" ,(lisp "site/ironclad") ("ironclad.asd"))
    (xcvb git "http://common-lisp.net/project/xcvb/xcvb.git/" ,(lisp "site/xcvb") ())
    (bordeaux-threads darcs ,(cl-net-darcs "bordeaux-threads") ,(lisp "site/bordeaux-threads") ("bordeaux-threads.asd"))
    (stefil darcs ,(cl-net-darcs "stefil") ,(lisp "site/stefil") ("stefil.asd"))
    (metabang-bind darcs "http://common-lisp.net/project/metabang-bind/" ,(lisp "site/metabang-bind") ("metabang-bind.asd"))
    (gbbopen svn "http://GBBopen.org/svn/GBBopen/trunk/" ,(lisp "site/gbbopen") ("gbbopen.asd"))
    (s-xml-rpc cvs ,(cl-net-cvs "s-xml-rpc" "s-xml-rpc") ,(lisp "site/s-xml-rpc") ("s-xml-rpc.asd"))
    (montezuma svn "http://montezuma.googlecode.com/svn/trunk/montezuma" ,(lisp "site/montezuma") ("montezuma.asd"))
    (closure cvs ,(cl-net-cvs "closure" "closure") ,(lisp "site/closure") ("closure.asd"))
    (skippy wget "http://www.xach.com/lisp/skippy.tgz" ,(lisp "site/skippy") ("skippy.asd"))
    (salza2 wget "http://www.xach.com/lisp/salza2.tgz" ,(lisp "site/salza2") ("salza2.asd"))
    (zip cvs ,(cl-net-cvs "zip" "zip") ,(lisp "site/zip") ("zip.asd"))
    (trivial-usocket svn "svn://common-lisp.net/project/usocket/svn/trivial-usocket/trunk"
             ,(lisp "site/trivial-usocket") ("trivial-usocket.asd"))
    (trivial-sockets svn "svn://common-lisp.net/project/usocket/svn/trivial-sockets"
             ,(lisp "site/trivial-sockets") ("trivial-sockets.asd"))
    (gsharp cvs ,(cl-net-cvs "gsharp" "gsharp") ,(lisp "site/gsharp") ("gsharp.asd"))
    (midi wget "http://doc.gold.ac.uk/isms/lisp/midi/midi-20070618.tar.gz" ,(lisp "site/midi") ("midi.asd"))
    (cl-irc svn "svn://common-lisp.net/project/cl-irc/svn/trunk" ,(lisp "site/cl-irc") ("cl-irc.asd"))
    (tab-layout wget "http://bl0rg.net/~mgr/flux/tab-layout_2005-09-19_02-52+0200.tar.bz2"
                     ,(lisp "site/tab-layout-pane") ("tab-layout.asd" "radio-layout.asd" "stack-layout.asd"))
    (beirc cvs ,(cl-net-cvs "beirc" "beirc") ,(lisp "site/beirc") ("beirc.asd"))
    (gsll git "git://repo.or.cz/gsll.git" ,(lisp "site/gsll") ("gsll.asd"))
    (trivial-garbage darcs "http://common-lisp.net/~loliveira/darcs/trivial-garbage/"
                     ,(lisp "site/trivial-garbage") ("trivial-garbage.asd"))
    
    

;;;
    (ccl svn "http://svn.clozure.com/publicsvn/openmcl/trunk/linuxx86/ccl" ,(lisp "impl/ccl") ())
    (sbcl git "git://git.boinkor.net/sbcl.git" ,(lisp "impl/sbcl") ())
    (clisp cvs ":pserver:anonymous@clisp.cvs.sourceforge.net:/cvsroot/clisp clisp" ,(lisp "impl/clisp") ())
    (ecl git "http://ecls.sourceforge.net/git/ecl/.git" ,(lisp "impl/ecl") ())
    (gosh svn "https://gauche.svn.sourceforge.net/svnroot/gauche/Gauche/trunk" ,(lisp "impl/gauche") ())
    (gcl cvs ":pserver:anonymous@cvs.savannah.gnu.org:/sources/gcl gcl" ,(lisp "impl/gcl") ())
    (abcl svn "svn://common-lisp.net/project/armedbear/svn/trunk/abcl" ,(lisp "impl/abcl") ())

;;;

    (slime cvs ,(cl-net-cvs "slime" "slime") ,(~ ".emacs.d/slime") ("swank.asd"))
    (redshank darcs "http://www.foldr.org/~michaelw/projects/redshank"
              ,(~ ".emacs.d/redshank") ())
    (jabber-el cvs ":pserver:anonymous@emacs-jabber.cvs.sourceforge.net:/cvsroot/emacs-jabber emacs-jabber" ,(~ ".emacs.d/jabber") ())
    (emacs git "git://git.sv.gnu.org/emacs.git" ,(~ "c/emacs") ())
    (haskell-mode cvs ":pserver:anoncvs@cvs.haskell.org:/cvs fptools/CONTRIB/haskell-modes/emacs"
                  ,(~ ".emacs.d/haskell") ())
    (emms git "git://git.sv.gnu.org/emms.git" ,(~ ".emacs.d/emms") ())
    (emacs-chess git "git://github.com/jwiegley/emacs-chess.git" ,(~ ".emacs.d/chess") ())
;;    (clojure-mode git "git://github.com/jochu/clojure-mode.git" ,(~ ".emacs.d/clojure") ())
    (clojure-mode darcs "http://www.lysator.liu.se/~lenst/darcs/clojure-mode/" ,(~ ".emacs.d/clojure") ())
    (swank-clojure git "git://github.com/jochu/swank-clojure.git" ,(~ ".emacs.d/swank-clojure") ())

    (mplayer svn "svn://svn.mplayerhq.hu/mplayer/trunk" ,(~ "c/mplayer") ())

    (maxima cvs ":pserver:anonymous@maxima.cvs.sourceforge.net:/cvsroot/maxima maxima" ,(~ "c/maxima") ())
    (x264 git "git://git.videolan.org/x264.git" ,(~ "c/x264") ())))
